install.packages(“googlesheets”) library(googlesheets)
install.packages(“googlesheets”) library(googlesheets)
demo()
install.packages(“googlesheets”)
install.packages(googlesheets)
install.packages('googlesheets')
library(googlesheets)
library(googlesheets)
WeatherDataURL <- gs_url(“https://docs.google.com/spreadsheets/d/1UNQ_LMXFdq6GmQRCUhGd1iY4GQ_a4qEN0sH_cDylU_k/edit?usp=sharing”)
history
history()
WeatherDataURL <- gs_url('https://docs.google.com/spreadsheets/d/1UNQ_LMXFdq6GmQRCUhGd1iY4GQ_a4qEN0sH_cDylU_k/edit?usp=sharing')
gs_ws_ls(WeatherDataURL)
View(WeatherDataURL)
View(WeatherDataURL)
gs_ws_ls(WeatherDataURL)
AllWeatherData <- gs_read(ss=WeatherDataURL, ws = “MayWeather”, skip = 0)
str(AllWeatherData)
AllWeatherData <- gs_read(ss=WeatherDataURL, ws = MayWeather, skip = 0)
str(AllWeatherData)
AllWeatherData <- gs_read(ss=WeatherDataURL, ws = MayWeather, skip = 0)
gs_ws_ls(WeatherDataURL)
AllWeatherData <- gs_read(ss=WeatherDataURL, ws = MayWeather, skip = 0)
defaults write org.R-project.R force.LANG en_US.UTF-8
.rs.restartR()
0.15 * 19.71
install.packages("tidyverse")
install.packages(dslabs)
install.packages("dslabs")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(murders)
View(murders)
View(murders)
View(murders)
View(murders)
View(murders)
View(murders)
source('~/.active-rstudio-document', echo=TRUE)
View(murders)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(murders)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
result <- ifelse(a > 0, 1/a, NA)
a <- c(0, 1, 2, -4, 5)
result <- ifelse(a > 0, 1/a, NA)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
c(1,2,3,4)
c(1:4,2:8)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(1:4,1:4)
plot(1:1000,1:1000)
plot(1,1)
as.Date("01-12-2020", "%d-%m-%y")
as.Date("01-22-2020", "%d-%m-%y")
as.Date("01-22-20", "%d-%m-%y")
as.Date("01-22-20", "%d-%m-%Y")
as.Date("01-22-20", "%d-%m-%y")
source('~/.active-rstudio-document', echo=TRUE)
x <- repeat(3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/OneDrive - Universidad Icesi/Maestría/EDA/Talleres/Práctica 1/script.R', echo=TRUE)
pwd
pwd()
source('~/Desktop/OneDrive - Universidad Icesi/Maestría/EDA/Talleres/Práctica 1/script.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Load Dataset splitted by (;)
insurance_dataset <- read.csv2("base_clientes.csv")
setwd("~/Desktop/OneDrive - Universidad Icesi/Maestría/EDA/Talleres/Insurance-Company")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Load Dataset splitted by (;)
insurance_dataset <- read.csv2("base_clientes.csv")
# Print the first 6 elements
kable(head(insurance_dataset, 6))
# Print the data structure
str(insurance_dataset)
# MISSING VALUES
summary.table(table(summary(insurance_dataset)))
# MISSING VALUES
summary(insurance_dataset)
# MISSING VALUES
summary(insurance_dataset)
# MISSING VALUES
summary(insurance_dataset)
str(insurance_dataset)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Load Dataset splitted by (;) and map the empty values ("") to NA
insurance_dataset <-
read.csv2("./base_clientes.csv", na.strings = c("", "NA"))
# Print the first 6 elements
kable(head(insurance_dataset, 6))
# Print the data structure
str(insurance_dataset)
# Print the variable type for each feature
cat("The variable type for date is:", class(insurance_dataset$date), "\n")
cat("The variable type for sex is:", class(insurance_dataset$sex), "\n")
cat("The variable type for age is:", class(insurance_dataset$age), "\n")
# First, convert the date as a Date format instead of a factor
insurance_dataset$date <-
as.Date(insurance_dataset$date, format = "%m/%d/%Y")
# Second, convert the sex to a factor instead of a integer because it is a qualitative value
insurance_dataset$sex <-
factor(
insurance_dataset$sex,
levels = c("1", "2"),
labels = c("Female", "Male")
)
# Finally, convert the age as a cuantitative value instead of a qualitative. For that, cast to an integer value
# Supressing warnings because it will cast string values to NA
suppressWarnings(insurance_dataset$age <-
as.integer(as.character(insurance_dataset$age)))
# Print the data structure
str(insurance_dataset)
kable(table(duplicated(insurance_dataset$custid)), col.names= c("¿is duplicated?", "Frecuency"))
# Find duplicated values
duplicatedIds <- insurance_dataset$custid[duplicated(insurance_dataset$custid)]
duplicatedDF <- subset(insurance_dataset, custid %in% duplicatedIds)
kable(duplicatedDF)
# Due to the id should not be duplicated we delete the copies
insurance_dataset <- unique(insurance_dataset)
# There should not be duplicated data
kable(table(duplicated(insurance_dataset$custid)), col.names= c("¿Duplicates?", "Frecuency"))
# MISSING VALUES
summary(insurance_dataset)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Load Dataset splitted by (;) and map the empty values ("") to NA
insurance_dataset <-
read.csv2("./base_clientes.csv", na.strings = c("", "NA"))
# Print the first 6 elements
kable(head(insurance_dataset, 6))
# Print the data structure
str(insurance_dataset)
# Print the variable type for each feature
cat("The variable type for date is:", class(insurance_dataset$date), "\n")
cat("The variable type for sex is:", class(insurance_dataset$sex), "\n")
cat("The variable type for age is:", class(insurance_dataset$age), "\n")
# First, convert the date as a Date format instead of a factor
insurance_dataset$date <-
as.Date(insurance_dataset$date, format = "%m/%d/%Y")
# Second, convert the sex to a factor instead of a integer because it is a qualitative value
insurance_dataset$sex <-
factor(
insurance_dataset$sex,
levels = c("1", "2"),
labels = c("Female", "Male")
)
# Finally, convert the age as a cuantitative value instead of a qualitative. For that, cast to an integer value
# Supressing warnings because it will cast string values to NA
suppressWarnings(insurance_dataset$age <-
as.integer(as.character(insurance_dataset$age)))
# Print the data structure
str(insurance_dataset)
kable(table(duplicated(insurance_dataset$custid)), col.names= c("¿is duplicated?", "Frecuency"))
# Find duplicated values
duplicatedIds <- insurance_dataset$custid[duplicated(insurance_dataset$custid)]
duplicatedDF <- subset(insurance_dataset, custid %in% duplicatedIds)
kable(duplicatedDF)
# Due to the id should not be duplicated we delete the copies
insurance_dataset <- unique(insurance_dataset)
# There should not be duplicated data
kable(table(duplicated(insurance_dataset$custid)), col.names= c("¿Duplicates?", "Frecuency"))
# MISSING VALUES
summary(insurance_dataset)
# First, let's search the only missing value for sex
missing <- insurance_dataset[which(is.na(insurance_dataset$sex)), ]
kable(missing)
# Looks like that row has a lot of missing values for the cols, thats why that row is deleted
library(tidyr)
insurance_dataset <- insurance_dataset %>% drop_na(sex)
summary(insurance_dataset)
summary(insurance_dataset)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
# Load Dataset splitted by (;) and map the empty values ("") to NA
insurance_dataset <-
read.csv2("./base_clientes.csv", na.strings = c("", "NA"))
# Print the first 6 elements
kable(head(insurance_dataset, 6))
# Print the data structure
str(insurance_dataset)
# Print the variable type for each feature
cat("The variable type for date is:", class(insurance_dataset$date), "\n")
cat("The variable type for sex is:", class(insurance_dataset$sex), "\n")
cat("The variable type for age is:", class(insurance_dataset$age), "\n")
cat("The variable type for vehicle is:", class(insurance_dataset$vehicle), "\n")
# First, convert the date as a Date format instead of a factor
insurance_dataset$date <-
as.Date(insurance_dataset$date, format = "%m/%d/%Y")
# Second, convert the sex to a factor instead of a integer because it is a qualitative value
insurance_dataset$sex <-
factor(
insurance_dataset$sex,
levels = c("1", "2"),
labels = c("Female", "Male")
)
# Third, convert vehicle to boolean because it is a yes or not value
insurance_dataset$vehicle <- as.logical(factor(
insurance_dataset$vehicle,
levels = c("YES", "NO"),
labels = c("True", "False")
))
# Finally, convert the age as a cuantitative value instead of a qualitative. For that, cast to an integer value
# Supressing warnings because it will cast string values to NA
suppressWarnings(insurance_dataset$age <-
as.integer(as.character(insurance_dataset$age)))
# Print the data structure
str(insurance_dataset)
kable(table(duplicated(insurance_dataset$custid)), col.names= c("¿is duplicated?", "Frecuency"))
# Find duplicated values
duplicatedIds <- insurance_dataset$custid[duplicated(insurance_dataset$custid)]
duplicatedDF <- subset(insurance_dataset, custid %in% duplicatedIds)
kable(duplicatedDF)
# Due to the id should not be duplicated we delete the copies
insurance_dataset <- unique(insurance_dataset)
# There should not be duplicated data
kable(table(duplicated(insurance_dataset$custid)), col.names= c("¿Duplicates?", "Frecuency"))
# MISSING VALUES
summary(insurance_dataset)
# First, let's search the only one value for sex
missing <- insurance_dataset[which(is.na(insurance_dataset$sex)), ]
kable(missing)
# Looks like that row has a lot of missing values for the cols, thats why that row is deleted
library(tidyr)
insurance_dataset <- insurance_dataset %>% drop_na(sex)
summary(insurance_dataset)
# Let's try to find any relationship between NA num vehicles and vehicles:
summary(insurance_dataset[(insurance_dataset$vehicle == FALSE & insurance_dataset$num.vehicles == 0), c("vehicle", "num.vehicles")])
# Override the NA to cero because if there is a NA value, then there is a False for Vehicle
# value for the vehicle feature
insurance_dataset$num.vehicles <-
ifelse(is.na(insurance_dataset$num.vehicles),
0,
insurance_dataset$num.vehicles)
# For NAs for age, let's save these values as 0.
insurance_dataset$age <-
ifelse(is.na(insurance_dataset$age), 0, insurance_dataset$age)
summary(insurance_dataset)
# There are just two variables with NA's: is.employed with 328 (33% of the data) and
# housing.type with 56 (6% of the data). Due to housing.type has a narrow percent of
# the data it is safe to drop these customers, but not for is.employed because
# it is the third part of the data.
insurance_dataset <- insurance_dataset %>% drop_na(housing.type)
# For is.employed let's replace the NA's for a new value that encodes for someone who is
# not in active in the actual workforce
insurance_dataset$is.employed <-
ifelse(
is.na(insurance_dataset$is.employed),
"Other",
ifelse(
insurance_dataset$is.employed == TRUE,
"Employee",
"Not Employee"
)
)
insurance_dataset$is.employed <-
factor(insurance_dataset$is.employed)
summary(insurance_dataset)
summary(insurance_dataset)
